use("db_campus_alquiler");
db.createCollection("sucursales", {
    capped: true,
    size: 2000,
    max: 6,
    validator: {
        $jsonSchema: {
            "bsonType": "object",
            "required": ["_id", "ID_sucursal", "Nombre", "Direccion", "Telefono"],
            "properties": {
                "_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'_id' el _id es incorrecto"
                },
                "ID_sucursal": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'ID_sucursal' el ID_sucursal es incorrecto"
                },
                "Nombre": {
                    "bsonType": "string",
                    "maxLength": 30,
                    "description": "'Nombre' el Nombre es incorrecto"
                },
                "Direccion": {
                    "bsonType": "string",
                    "maxLength": 100,
                    "description": "'Direccion' la Direccion es incorrecta"
                },
                "Telefono": {
                    "bsonType": "int",
                    "minLength": 8,
                    "maxLength": 9,
                    "description": "'Telefono' el Telefono es incorrecto"
                }
            }
        }
    }
});
db.sucursales.insertMany([
    {
        _id: 1,
        "ID_sucursal": 1,
        "Nombre": "Zona Franca",
        "Direccion": "Florida",
        "Telefono": 987654321
    },
    {
        _id: 2,
        "ID_sucursal": 2,
        "Nombre": "Mexico",
        "Direccion": "City Mecico",
        "Telefono": 123457632
    },
    {
        _id: 3,
        "ID_sucursal": 3,
        "Nombre": "Barcelona",
        "Direccion": "Espa√±a",
        "Telefono": 312441312
    },
    {
        _id: 4,
        "ID_sucursal": 4,
        "Nombre": "Irlanda",
        "Direccion": "Argentina",
        "Telefono": 432943212
    },
    {
        _id: 5,
        "ID_sucursal": 5,
        "Nombre": "Miami",
        "Direccion": "EEUU",
        "Telefono": 754532344
    }
]);

use("db_campus_alquiler");
db.createCollection("automoviles", {
    capped: true,
    size: 2000,
    max: 6,
    validator: {
        $jsonSchema: {
            "bsonType": "object",
            "required": ["_id", "ID_Automovil", "Marca", "Modelo", "Anio", "Tipo", "Capacidad", "Precio_Diario"],
            "properties": {
                "_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'_id' el _id es incorrecto"
                },
                "ID_Automovil": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'ID_Automovil' el ID_Automovil es incorrecto"
                },
                "Marca": {
                    "bsonType": "string",
                    "maxLength": 30,
                    "description": "'Marca' la Marca es incorrecta"
                },
                "Modelo": {
                    "bsonType": "string",
                    "maxLength": 30,
                    "description": "'Modelo' el Modelo es incorrecto"
                },
                "Anio": {
                    "bsonType": "int",
                    "minimum": 1980,
                    "maximum": 2025,
                    "description": "'Anio' el Anio es incorrecto"
                },
                "Tipo": {
                    "bsonType": "string",
                    "maxLength": 30,
                    "description": "'Tipo' el Tipo es incorrecto"
                },
                "Capacidad": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'Capacidad' la Capacidad es incorrecta"
                },
                "Precio_Diario": {
                    "bsonType": "string",
                    "minLength": 1,
                    "maxLength": 7,
                    "description": "'Precio_Diario' el Precio_Diario es incorrecto"
                }
            }
        }
    }
});
db.automoviles.insertMany([
    {
        _id: 1,
        "ID_Automovil": 1,
        "Marca": "Renault",
        "Modelo": "Renault Sandero",
        "Anio": 2023,
        "Tipo": "Carro",
        "Capacidad": 4,
        "Precio_Diario": "500.000"
    },
    {
        _id: 2,
        "ID_Automovil": 2,
        "Marca": "Renault",
        "Modelo": "Renault 123",
        "Anio": 2020,
        "Tipo": "Carro",
        "Capacidad": 6,
        "Precio_Diario": "300.000"
    },
    {
        _id: 3,
        "ID_Automovil": 3,
        "Marca": "Renault",
        "Modelo": "Renault 321",
        "Anio": 2021,
        "Tipo": "Carro",
        "Capacidad": 7,
        "Precio_Diario": "122.000"
    },
    {
        _id: 4,
        "ID_Automovil": 4,
        "Marca": "Renault",
        "Modelo": "Renault 432",
        "Anio": 2010,
        "Tipo": "Carro",
        "Capacidad": 5,
        "Precio_Diario": "600.000"
    },
    {
        _id: 5,
        "ID_Automovil": 5,
        "Marca": "Renault",
        "Modelo": "Renault 543",
        "Anio": 2019,
        "Tipo": "Carro",
        "Capacidad": 4,
        "Precio_Diario": "102.000"
    }
]);

use("db_campus_alquiler");
db.createCollection("sucursal_automoviles", {
    capped: true,
    size: 2000,
    max: 6,
    validator: {
        $jsonSchema: {
            "bsonType": "object",
            "required": ["_id", "sucursal_id", "automovil_id", "Cantidad_Disponible"],
            "properties": {
                "_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'_id' el _id es incorrecto"
                },
                "sucursal_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'sucursal_id' el sucursal_id es incorrecto"
                },
                "automovil_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'automovil_id' el automovil_id es incorrecto"
                },
                "Cantidad_Disponible": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 50,
                    "description": "'Cantidad_Disponible' la Cantidad_Disponible es incorrecto"
                }
            }
        }
    }
});
db.sucursal_automoviles.insertMany([
    {
        _id: 1,
        "sucursal_id": 1,
        "automovil_id": 1,
        "Cantidad_Disponible": 5
    },
    {
        _id: 2,
        "sucursal_id": 2,
        "automovil_id": 3,
        "Cantidad_Disponible": 3
    },
    {
        _id: 3,
        "sucursal_id": 5,
        "automovil_id": 2,
        "Cantidad_Disponible": 4
    },
    {
        _id: 4,
        "sucursal_id": 4,
        "automovil_id": 1,
        "Cantidad_Disponible": 4
    },
    {
        _id: 5,
        "sucursal_id": 4,
        "automovil_id": 5,
        "Cantidad_Disponible": 4
    }
]);

use("db_campus_alquiler");
db.createCollection("reservas", {
    validator: {
        $jsonSchema: {
            "bsonType": "object",
            "required": ["_id", "ID_Reserva","cliente_id","automovil_id","Fecha_Reserva","Fecha_Inicio","Fecha_Fin","Estado"],
            "properties": {
                "_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "Debe ser un numero entre 1 y 100"
                },
                "ID_Reserva": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "Debe ser un numero entre 1 y 100"
                },
                "cliente_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "Debe ser un numero entre 1 y 100"
                },
                "automovil_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "Debe ser un numero entre 1 y 100"
                },
                "Fecha_Reserva": {
                    "bsonType": "string",
                    "minLength": 10,
                    "description": "'_id' el _id es incorrecto"
                },
                "Fecha_Inicio": {
                    "bsonType": "string",
                    "minLength": 10,
                    "description": "Debe ser una cadena con 10 caracteres"
                },
                "Fecha_Fin": {
                    "bsonType": "string",
                    "minLength": 10,
                    "description": "Debe ser una cadena con 10 caracteres"
                },
                "Estado": {
                    "bsonType": "string",
                    "minLength": 6,
                    "description": "Debe ser una cadena de minimo 6 caracteres"
                }
            }
        }
    }
});
db.reservas.insertMany([
    {
        _id: 1,
        "ID_Reserva": 1,
        "cliente_id": 2,
        "automovil_id": 1,
        "Fecha_Reserva": "11/08/2023",
        "Fecha_Inicio": "18/08/2023",
        "Fecha_Fin": "20/08/2023",
        "Estado": "Pendiente"
    },
    {
        _id: 2,
        "ID_Reserva": 2,
        "cliente_id": 1,
        "automovil_id": 1,
        "Fecha_Reserva": "13/08/2023",
        "Fecha_Inicio": "19/08/2023",
        "Fecha_Fin": "22/08/2023",
        "Estado": "Pendiente"
    },
    {
        _id: 3,
        "ID_Reserva": 3,
        "cliente_id": 5,
        "automovil_id": 1,
        "Fecha_Reserva": "15/08/2023",
        "Fecha_Inicio": "16/08/2023",
        "Fecha_Fin": "21/08/2023",
        "Estado": "Reservado"
    },
    {
        _id: 4,
        "ID_Reserva": 4,
        "cliente_id": 1,
        "automovil_id": 1,
        "Fecha_Reserva": "20/08/2023",
        "Fecha_Inicio": "28/08/2023",
        "Fecha_Fin": "30/08/2023",
        "Estado": "Reservado"
    },
    {
        _id: 5,
        "ID_Reserva": 5,
        "cliente_id": 1,
        "automovil_id": 1,
        "Fecha_Reserva": "12/08/2023",
        "Fecha_Inicio": "15/08/2023",
        "Fecha_Fin": "17/08/2023",
        "Estado": "Reservado"
    }
]);

use("db_campus_alquiler");
db.createCollection("alquileres", {
    validator: {
        $jsonSchema: {
            "bsonType": "object",
            "required": ["_id", "ID_Alquiler", "cliente_id", "automovil_id", "Fecha_Inicio","Fecha_Fin","Costo_Total","Estado"],
            "properties": {
                "_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'_id' el _id es incorrecto"
                },
                "ID_Alquiler": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'ID_Alquiler' el ID_Alquiler es incorrecto"
                },
                "cliente_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'cliente_id' el cliente_id es incorrecto"
                },
                "automovil_id": {
                    "bsonType": "int",
                    "minimum": 1,
                    "maximum": 100,
                    "description": "'automovil_id' el automovil_id es incorrecto"
                },
                "Fecha_Inicio": {
                    "bsonType": "string",
                    "minLength": 10,
                    "description": "'Fecha_Inicio' la Fecha_Inicio es incorrecto"
                },
                "Fecha_Fin": {
                    "bsonType": "string",
                    "minLength": 10,
                    "description": "'Fecha_Fin' la Fecha_Fin es incorrecto"
                },
                "Costo_Total": {
                    "bsonType": "string",
                    "minLength": 6,
                    "description": "'Costo_Total' el Costo_Total es incorrecto"
                },
                "Estado": {
                    "bsonType": "string",
                    "minLength": 8,
                    "description": "'Estado' el Estado es incorrecto"
                }
            }
        }
    }
});
db.alquileres.insertMany([
    {
        _id: 1,
        "ID_Alquiler": 1,
        "cliente_id": 1,
        "automovil_id": 1,
        "Fecha_Inicio": "2023-08-19",
        "Fecha_Fin": "2023-08-21",
        "Costo_Total": "600.000",
        "Estado": "Alquilado" 
    },
    {
        _id: 2,
        "ID_Alquiler": 2,
        "cliente_id": 2,
        "automovil_id": 2,
        "Fecha_Inicio": "2023-08-20",
        "Fecha_Fin": "2023-08-22",
        "Costo_Total": "400.000",
        "Estado": "Disponible" 
    },
    {
        _id: 3,
        "ID_Alquiler": 3,
        "cliente_id": 1,
        "automovil_id": 3,
        "Fecha_Inicio": "2023-07-05",
        "Fecha_Fin": "2023-08-21",
        "Costo_Total": "500.000",
        "Estado": "Disponible" 
    },
    {
        _id: 4,
        "ID_Alquiler": 4,
        "cliente_id": 3,
        "automovil_id": 4,
        "Fecha_Inicio": "2023-08-22",
        "Fecha_Fin": "2023-08-24",
        "Costo_Total": "800.000",
        "Estado": "Alquilado" 
    },
    {
        _id: 5,
        "ID_Alquiler": 5,
        "cliente_id": 4,
        "automovil_id": 5,
        "Fecha_Inicio": "2023-08-24",
        "Fecha_Fin": "2023-08-27",
        "Costo_Total": "900.000",
        "Estado": "Disponible" 
    }
]);

use("db_campus_alquiler");
db.createCollection("clientes");
db.clientes.insertMany([
    {
        _id: 1,
        "ID_Cliente": 1,
        "Nombre": "Jhon Santiago",
        "Apellido": "Bernal Jurado",
        "DNI": 109821901,
        "Direccion": "Cr 6 #90-12",
        "Telefono": 3123860654,
        "Email": "jbernalsantiago@gmail.com"
    },
    {
        _id: 2,
        "ID_Cliente": 2,
        "Nombre": "Daniel",
        "Apellido": "Hernandez",
        "DNI": 489213981,
        "Direccion": "Cr 4 #20-10",
        "Telefono": 3123342422,
        "Email": "danielhernandez@gmail.com"
    },
    {
        _id: 3,
        "ID_Cliente": 3,
        "Nombre": "Diego",
        "Apellido": "Quintero",
        "DNI": 109532412,
        "Direccion": "Cr 3 #30-2",
        "Telefono": 3118124324,
        "Email": "diegoquintero@gmail.com"
    },
    {
        _id: 4,
        "ID_Cliente": 4,
        "Nombre": "Angie",
        "Apellido": "Cala",
        "DNI": 100532853,
        "Direccion": "Cr 1 #50-40",
        "Telefono": 3118128028,
        "Email": "angiecala@gmail.com"
    },
    {
        _id: 5,
        "ID_Cliente": 5,
        "Nombre": "Angela",
        "Apellido": "Esperanza",
        "DNI": 63542975,
        "Direccion": "Cr 20 #10-10",
        "Telefono": 3166010786,
        "Email": "angelaesperanza@gmail.com"
    }
]);


db.createCollection("registro_devoluciones");
db.createCollection("registro_entregas");
db.createCollection("empleados");











db.registro_devoluciones.insertMany([
    {
        _id: 1,
        "ID_Registro": 1,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Devolucion": "20/08/2023",
        "Combustible_Devuelto": "5,16",
        "Kilometraje_Devuelto": 4000,
        "Monto_Adicional": "123,12"
    },
    {
        _id: 2,
        "ID_Registro": 2,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Devolucion": "30/08/2023",
        "Combustible_Devuelto": "4,70",
        "Kilometraje_Devuelto": 5000,
        "Monto_Adicional": "120,12"
    },
    {
        _id: 3,
        "ID_Registro": 3,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Devolucion": "28/08/2023",
        "Combustible_Devuelto": "12.21",
        "Kilometraje_Devuelto": 1000,
        "Monto_Adicional": "100.1"
    },
    {
        _id: 4,
        "ID_Registro": 4,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Devolucion": "21/08/2023",
        "Combustible_Devuelto": "6,2",
        "Kilometraje_Devuelto": 500,
        "Monto_Adicional": "210.124"
    },
    {
        _id: 5,
        "ID_Registro": 5,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Devolucion": "26/08/2023",
        "Combustible_Devuelto": "12.21",
        "Kilometraje_Devuelto": 200,
        "Monto_Adicional": "98.21"
    }
]);

db.registro_entregas.insertMany([
    {
        _id: 1,
        "ID_Registro": 1,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Entrega": "20/08/2023",
        "Combustible_Entregado": "40,12",
        "Kilometraje_Entregado": 200
    },
    {
        _id: 2,
        "ID_Registro": 2,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Entrega": "21/08/2023",
        "Combustible_Entregado": "30,2",
        "Kilometraje_Entregado": 10
    },
    {
        _id: 3,
        "ID_Registro": 3,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Entrega": "26/08/2023",
        "Combustible_Entregado": "12,5",
        "Kilometraje_Entregado": 100
    },
    {
        _id: 4,
        "ID_Registro": 4,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Entrega": "30/08/2023",
        "Combustible_Entregado": "50,31",
        "Kilometraje_Entregado": 400
    },
    {
        _id: 5,
        "ID_Registro": 5,
        "alquiler_id": 1,
        "empleado_id": 1,
        "Fecha_Entrega": "29/08/2023",
        "Combustible_Entregado": "90,13",
        "Kilometraje_Entregado": 500
    }
]);

db.empleados.insertMany([
    {
        _id: 1,
        "ID_Empleado": 1,
        "Nombre": "James Ronald",
        "Apellido": "Bernal Bermudez",
        "DNI": 91514559,
        "Direccion": "Cr8 #12-12",
        "Telefono": 3127141832,
        "Cargo": "Vendedor"
    },
    {
        _id: 2,
        "ID_Empleado": 2,
        "Nombre": "Stiven",
        "Apellido": "Carvajal",
        "DNI": 84392389,
        "Direccion": "Cr4 #20-40",
        "Telefono": 3124234876,
        "Cargo": "Gerente"
    },
    {
        _id: 3,
        "ID_Empleado": 3,
        "Nombre": "Miguel",
        "Apellido": "Carrillo",
        "DNI": 64432341,
        "Direccion": "Cr2 #54-21",
        "Telefono": 312343245,
        "Cargo": "Asistente"
    },
    {
        _id: 4,
        "ID_Empleado": 4,
        "Nombre": "Jolver",
        "Apellido": "Prado",
        "DNI": 53423412,
        "Direccion": "Cr43 #76-98",
        "Telefono": 312334344,
        "Cargo": "Asistente"
    },
    {
        _id: 5,
        "ID_Empleado": 5,
        "Nombre": "Andres",
        "Apellido": "Sepulveda",
        "DNI": 65423442,
        "Direccion": "Cr12 #12-12",
        "Telefono": 312314322,
        "Cargo": "Vendedor"
    }
]);

/**
 * Relacion de sucursal a sucursal_automovil
 */
use("db_campus_alquiler");
db.sucursales.aggregate([
    {
        $match: {
            ID_sucursal: 1 
        }
    },
    {
        $lookup: {
            from: "sucursal_automoviles",
            localField: "_id",
            foreignField: "sucursal_id",
            as: "Sucursal" 
        }
    },
    {
        $project: {
            _id: 0,
            "Sucursal.automovil_id": 0
        }
    }
]);

/**
 * Relacion de automovil a sucursal_automovil
 */
use("db_campus_alquiler");
db.automoviles.aggregate([
    {
        $match: {
            ID_Automovil: 1
        }
    },
    {
        $lookup: {
            from: "sucursal_automoviles",
            localField: "_id",
            foreignField: "automovil_id",
            as: "Sucursal"
        }
    },
    {
        $project: {
            _id: 0,
            "Sucursal.sucursal_id": 0
        }
    }
]);

/**
 * Relacion de automovil a reserva
*/
use("db_campus_alquiler");
db.automoviles.aggregate([
    {
        $match: {
            ID_Automovil: 1
        }
    },
    {
        $lookup: {
            from: "reservas",
            localField: "_id",
            foreignField: "automovil_id",
            as: "Reserva"
        }
    },
    {
        $project: {
            _id: 0,
            "Reserva.cliente_id": 0
        }
    }
]);

/**
 * Relacion de automovil a alquiler
 */
use("db_campus_alquiler");
db.automoviles.aggregate([
    {
        $match: {
            ID_Automovil: 1
        }
    },
    {
        $lookup: {
            from: "alquileres",
            localField: "_id",
            foreignField: "automovil_id",
            as: "Alquiler"
        }
    },
    {
        $project: {
            _id: 0,
            "Alquiler.cliente_id": 0
        }
    }
]);

/**
 * Relacion cliente a reserva
 */
use("db_campus_alquiler");
db.clientes.aggregate([
    {
        $match: {
            ID_Cliente: 1
        }
    },
    {
        $lookup: {
            from: "reservas",
            localField: "_id",
            foreignField: "cliente_id",
            as: "Reserva"
        }
    },
    {
        $project: {
            _id: 0,
            "Reserva.automovil_id": 0
        }
    }
]);

/**
 * Relacion cliente a alquiler
 */
use("db_campus_alquiler");
db.clientes.aggregate([
    {
        $match: {
            ID_Cliente: 1
        }
    },
    {
        $lookup: {
            from: "alquileres",
            localField: "_id",
            foreignField: "cliente_id",
            as: "Alquiler"
        }
    },
    {
        $project: {
            _id: 0,
            "Alquiler.automovil_id": 0
        }
    }
]);

/**
 * Relacion alquiler a registro_devolucion
 */
use("db_campus_alquiler");
db.alquileres.aggregate([
    {
        $match: {
            ID_Alquiler: 1
        }
    },
    {
        $lookup: {
            from: "registro_devoluciones",
            localField: "_id",
            foreignField: "alquiler_id",
            as: "Registro_Devolucion"
        }
    },
    {
        $project: {
            _id: 0,
            "cliente_id": 0,
            "Registro_Devolucion.empleado_id": 0
        }
    }
]);

/**
 * Relacion alquiler a registro_entrega
 */
use("db_campus_alquiler");
db.alquileres.aggregate([
    {
        $match: {
            ID_Alquiler: 1
        }
    },
    {
        $lookup: {
            from: "registro_entregas",
            localField: "_id",
            foreignField: "alquiler_id",
            as: "Registro_Entrega"
        }
    },
    {
        $project: {
            _id: 0,
            "cliente_id": 0,
            "Registro_Entrega.empleado_id": 0
        }
    }
]);

/**
 * Relacion empleado a registro_devolucion
 */
use("db_campus_alquiler");
db.empleados.aggregate([
    {
        $match: {
            ID_Empleado: 1
        }
    },
    {
        $lookup: {
            from: "registro_devoluciones",
            localField: "_id",
            foreignField: "empleado_id",
            as: "Registro_Devolucion"
        }
    },
    {
        $project: {
            _id: 0,
            "Registro_Devolucion.alquiler_id": 0,
        }
    }
]);

/**
 * Relacion empleado a registro_entrega
 */
use("db_campus_alquiler");
db.empleados.aggregate([
    {
        $match: {
            ID_Empleado: 1
        }
    },
    {
        $lookup: {
            from: "registro_entregas",
            localField: "_id",
            foreignField: "empleado_id",
            as: "Registro_Entrega"
        }
    },
    {
        $project: {
            _id: 0,
            "Registro_Entrega.alquiler_id": 0
        }
    }
])

/**1
 * Mostrar todos lo clientes registrados en la base de datos*/
use("db_campus_alquiler");
db.clientes.find();

/**2
 * Obtener todos los automoviles disponibles para alquiler */
use("db_campus_alquiler");
db.automoviles.aggregate([
    {
        $lookup: {
            from: "alquileres",
            localField: "_id",
            foreignField: "automovil_id",
            as: "Alquiler"
        }
    },
    {
        $match: {
            "Alquiler.Estado": "Disponible"
        }
    },
    {
        $project: {
            "Alquiler": 0
        }
    }
]);

/**3
 * Listar todos los alquileres Alquilado junto con los datos de los
clientes relacionados. */
use("db_campus_alquiler");
db.alquileres.aggregate([
    {
        $match: {
            Estado: "Alquilado"
        }
    },
    {
        $lookup: {
            from: "clientes",
            localField: "cliente_id",
            foreignField: "ID_Cliente",
            as: "Cliente"
        }
    },
    {
        $project: {
            _id: 0,
            "automovil_id": 0,
            "Cliente.Direccion": 0
        }
    }
]);

/**4
 * Mostrar todas las reservas pendientes con los datos del cliente
y el autom√≥vil reservado.  */
use("db_campus_alquiler");
db.reservas.aggregate([
    {
        $match: {
            "Estado": "Pendiente"
        }
    },
    {
        $lookup: {
            from: "clientes",
            localField: "cliente_id",
            foreignField: "ID_Cliente",
            as: "Cliente"
        }
    },
    {
        $lookup: {
            from: "automoviles",
            localField: "automovil_id",
            foreignField: "ID_Automovil",
            as: "Automovil"
        }
    }
]);

/**5
 *  Obtener los detalles del alquiler con el ID_Alquilerespec√≠fico*/
use("db_campus_alquiler");
db.alquileres.find({ID_Alquiler: {$eq: 1}});

/**6
 * Listar los empleados con el Cargo de "Vendedor". */
use("db_campus_alquiler");
db.empleados.find({Cargo: {$eq: "Vendedor"}});

/**7
 *  Mostrar la cantidad total de autom√≥viles disponibles en cada
sucursal. */
use("db_campus_alquiler");
db.sucursal_automoviles.aggregate([
    {
        $group: {
            "_id": "$sucursal_id",
            "Cantidad_Total_Disponible": { $sum: "$Cantidad_Disponible" }
        }
    }
]);

/**8
 * Obtener el costo total de un alquiler espec√≠fico. */
use("db_campus_alquiler");
db.alquileres.find({ID_Alquiler: {$eq: 2}},{_id: 0,ID_Alquiler: 1,Costo_Total: 1});

/**9
 * Listar los clientes con el DNI espec√≠fico */
use("db_campus_alquiler");
db.clientes.find({DNI: {$eq: 489213981}});

/**10
 * Mostrar todos los autom√≥viles con una capacidad mayor a 5 personas*/
use("db_campus_alquiler");
db.automoviles.find({Capacidad: {$gt: 5}});

/**11
 * Obtener los detalles del alquiler que tiene fecha de inicio en
'2023-07-05'. */
use("db_campus_alquiler");
db.alquileres.find({Fecha_Inicio: {$eq: "2023-07-05"}});

/**12
 * Listar las reservas pendientes realizadas por un cliente
espec√≠fico. */
use("db_campus_alquiler");
db.clientes.aggregate([
    {
        $lookup: {
            from: "reservas",
            localField: "_id",
            foreignField: "cliente_id",
            as: "Reserva"
        }
    },
    {
        $project: {
            "Reserva._id": 0,
            "Reserva.automovil_id": 0,
            "Reserva.Fecha_Reserva": 0
        }
    },
    {
        $project: {
            "Reserva": {
                $filter: {
                    input: "$Reserva",
                    as: "reserva",
                    cond: { $ne: ["$$reserva.Estado", "Reservado"] }
                }
            }
        }
    },
    {
        $match: {
            "Reserva.Estado": "Pendiente"
        }
    }
]);

/**13
 *  Mostrar los empleados con cargo de "Gerente" o "Asistente*/
use("db_campus_alquiler")
db.empleados.find({$or: [
    {Cargo: {$eq: "Gerente"}},
    {Cargo: {$eq: "Asistente"}}
]});

/**14
 * Obtener los datos de los clientes que realizaron al menos un alquiler. */
use("db_campus_alquiler")
db.clientes.aggregate([
    {
        $lookup: {
            from: "alquileres",
            localField: "_id",
            foreignField: "cliente_id",
            as: "Alquiler"
        }
    },
    {
        $match: {
            "Alquiler": {$ne: []}
        }
    },
    {
        $project: {
            "Alquiler": 0
        }
    }
]);

/**15
 * Listar todos los autom√≥viles ordenados por marca y modelo */
use("db_campus_alquiler");
db.automoviles.aggregate([{
    $sort: {
        "Marca":1,
        "Modelo": 1 
    }
}]);

/**16
 * Mostrar la cantidad total de autom√≥viles en cada sucursal junto con su direcci√≥n */
use("db_campus_alquiler");
db.sucursales.aggregate([
    {
        $lookup: {
            from: "sucursal_automoviles",
            localField: "_id",
            foreignField: "sucursal_id",
            as: "Automovil"
        }
    },
    {
        $match: {
            "Automovil": {$ne: []}
        }
    }
]);

/**17
 * Obtener la cantidad total de alquileres registrados en la base de datos*/
use("db_campus_alquiler");
db.alquileres.find().count();

/**18
 * Mostrar los autom√≥viles con capacidad igual a 5 personas y que 
est√©n disponibles. */
use("db_campus_alquiler");
db.automoviles.aggregate([
    {
        $lookup: {
            from: "alquileres",
            localField: "_id",
            foreignField: "automovil_id",
            as: "Alquiler"
        }
    },
    {
        $match: {
            "Capacidad": 5,
            "Alquiler.Estado": "Disponible"
        }
    }
]);

/**19
 * Obtener los datos del cliente que realiz√≥ la reserva con ID_Reserva espec√≠fico
 */
use("db_campus_alquiler");
db.clientes.aggregate([
    {
        $lookup: {
            from: "reservas",
            localField: "_id",
            foreignField: "cliente_id",
            as: "Reservas"
        }
    },
    {
        $match: {
            "Reservas": {$ne: []},
            "Reservas.ID_Reserva": 5
        }
    },
    {
        $project: {
            "Reservas": 0
        }
    }
]);

/**20
 * Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'.
 */
use("db_campus_alquiler");
db.alquileres.find({$and: [
    {Fecha_Inicio: {$gte: '2023-07-05'}},
    {Fecha_Inicio: {$lte: '2023-07-10'}}
]});